/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//Idea is to use the fact that inorder traversal of BST gives sorted output, so first we will store inorder traversal output in an array 
// and then on this sorted array , we will apply two pointer technique to find a pair with given sum
 
 void getInorderTraversal(TreeNode* A, vector<int>& inorderOutput){
     if(!A)
     return;
     getInorderTraversal(A->left,inorderOutput);
     inorderOutput.push_back(A->val);
     getInorderTraversal(A->right,inorderOutput);
 }
int Solution::t2Sum(TreeNode* A, int B) {
  vector<int> inorderOutput;
  getInorderTraversal(A,inorderOutput);   
  int i = 0;
  int j = inorderOutput.size()-1;
  while(i<j){
      if(inorderOutput[i]+inorderOutput[j] == B)
      return 1;
      else if(inorderOutput[i]+inorderOutput[j] < B)
      i++;
      else
      j--;
  }
  return 0;
}
