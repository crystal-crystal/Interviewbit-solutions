
bool isBoundaryChar(int r,int c, int m ,int n){
    if(r == 0 || c==0 || c == n-1 || r == m-1)
    return true;
    return false;
}

void dfs(vector<vector<char>>& A,vector<vector<bool>>& visit,int r,int c,int m,int n){  
    visit[r][c] = true;   
    if(c+1 < n && A[r][c+1] == 'O' && !visit[r][c+1])
    dfs(A,visit,r,c+1,m,n);
      if(c-1 >=0 && A[r][c-1] == 'O' && !visit[r][c-1])
    dfs(A,visit,r,c-1,m,n);
      if(r+1 < m && A[r+1][c] == 'O' && !visit[r+1][c])
    dfs(A,visit,r+1,c,m,n);
      if(r-1 >=0 && A[r-1][c] == 'O' && !visit[r-1][c])
    dfs(A,visit,r-1,c,m,n);    
}
void Solution::solve(vector<vector<char> > &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
 int m = A.size();
 int n = A[0].size();
 vector<vector<bool>> visit(m,vector<bool>(n,false));
 for(int i = 0;i<m;i++){
     for(int j = 0;j<n;j++){
       if(isBoundaryChar(i,j,m,n) && A[i][j] == 'O' && !visit[i][j]){
         dfs(A,visit,i,j,m,n);
       }  
     }
 }  
 for(int i = 0;i<m;i++){
     for(int j = 0;j<n;j++){
         if(!visit[i][j] && A[i][j] == 'O')
         A[i][j] = 'X';
     }
 }
 
}
